# Below is the interface for Iterator, which is already defined for you.
#
# class Iterator:
#     def __init__(self, nums):
#         """
#         Initializes an iterator object to the beginning of a list.
#         :type nums: List[int]
#         """
#
#     def hasNext(self):
#         """
#         Returns true if the iteration has more elements.
#         :rtype: bool
#         """
#
#     def next(self):
#         """
#         Returns the next element in the iteration.
#         :rtype: int
#         """

class PeekingIterator:
    def __init__(self, iterator):
        self._iterator = iterator
        self._next = None

    def peek(self):
        if self._next is None:
            self._next = self._iterator.next()
        return self._next

    def next(self):
        value = self._next if self._next is not None else self._iterator.next()
        self._next = None
        return value

    def hasNext(self):
        return self._next is not None or self._iterator.hasNext()
