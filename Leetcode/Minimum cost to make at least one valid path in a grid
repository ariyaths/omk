class Solution:
    def minCost(self, grid):
        m=len(grid)
        n=len(grid[0])

        processed=set()
        q=deque([(0,0,0)])
        j = lambda t, r: (t, r) not in processed
        
        while q:
            x, y, l = q.popleft()
            
            if not j(x, y):
                continue
            
            if x - 1 >= 0 and j(x - 1, y):
                
                if grid[x][y] == 4:
                    q.appendleft((x - 1, y, l))
                    
                else:
                    q.append((x - 1, y, l + 1))
                    
            if x + 1 < m and j(x + 1, y):
                
                if grid[x][y] == 3:
                    q.appendleft((x + 1, y, l))
                    
                else:
                    q.append((x + 1, y, l + 1))
                    
            if y - 1 >= 0 and j(x, y - 1):
                
                if grid[x][y] == 2:
                    q.appendleft((x, y - 1, l))
                else:
                    q.append((x, y - 1, l + 1))
                    
            if y + 1 < n and j(x, y + 1):
                
                if grid[x][y] == 1:
                    q.appendleft((x, y + 1, l))
                    
                else:
                    q.append((x, y + 1, l + 1))
                    
            processed.add((x, y))
            
            if x == m - 1 and y == n - 1:
                return l
            
        return -1
