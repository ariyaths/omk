class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        adj = {i:[] for i in range(n)}
        for u, v in connections:
            adj[u].append(v)
            adj[v].append(u)
        
        tin = [0]*n
        low = [0]*n
        vis = [0]*n
        ans = []
        def dfs(node, parent, timer):
            vis[node] = 1
            tin[node] = low[node] = timer
            
            timer += 1
            
            for neigh in adj[node]:
                if neigh == parent:
                    continue
                if vis[neigh] == 0:
                    dfs(neigh, node, timer)
                    
                    low[node]  = min(low[node], low[neigh])
                    
                    if low[neigh] > tin[node]:
                        ans.append([neigh, node])
                else:
                    low[node] = min(low[node], tin[neigh])
        timer = 0
        for i in range(n):
            if vis[i] == 0:
                dfs(i, -1, timer)
        return ans
